#!/usr/bin/env bash
[[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
[[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################
#                       docli AWS SSO Tools
###############################################################################
## docli Markdown Generation:
#:: ## docli AWS SSO Tools
#:: `sso` [-h|--help]
#:: ## DESCRIPTION
#:: This program has the following functionalies:
#:: `sso clean` -> Cleans all AWS SSO Tokens (CLI and SSO caches)
#:: `sso <aws_profile>` -> Connect to the desired AWS SSO profile. (For more info how to configure go to https://devops.click/)

## DOCLI MODULE INFORMATION
DOCLI_MODULE_VERSION="0.0.01"
[[ "${BASH_SOURCE[0]}" != "" ]] && DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"                                             || DOCLI_MODULE="$(basename "$0")"
[[ "${BASH_SOURCE[0]}" != "" ]] && DOCLI_MODULE_TYPE="$(basename "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")"             || DOCLI_MODULE_TYPE="$(basename "$(dirname "$(realpath "$0")")")"
[[ "${BASH_SOURCE[0]}" != "" ]] && DOCLI_MODULE_UPPER=$(echo "$(basename "${BASH_SOURCE[0]}")"  | tr '[:lower:]' '[:upper:]') || DOCLI_MODULE_UPPER=$(echo "$(basename "$0")" | tr '[:lower:]' '[:upper:]')
##[[ "${DOCLI_MODULE_ARRAY_SOURCE:-on}" == "on" ]] && source ${DOCLI_DIR:-$DOCLI}/functions/docli_module_array

## SSO MODULE INFORMATION
sso_version="1.1"
[[ "${BASH_SOURCE[0]}" != "" ]] && sso_file_name="$(basename "${BASH_SOURCE[0]}")"                                            || sso_file_name="$(basename "$0")"
[[ "${BASH_SOURCE[0]}" != "" ]] && sso_file_name_upper=$(basename "${BASH_SOURCE[0]}" | tr '[:lower:]' '[:upper:]')           || sso_file_name_upper=$(basename "$0" | tr '[:lower:]' '[:upper:]')
sso_current_dir="$(pwd)"

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

sso_option=${1:-}      # always the company-short_region-environment (ex: xx-euc1-ent)
sso_option2=${2:-}     # If mfa -> MFA TOKEN | If eks -> EKS_ASSIGN = true

if [[ -z $sso_option2 ]]; then
  sso_eks_assign=false
elif [[ $sso_option2 == "eks" ]]; then
  sso_eks_assign=true
else
  sso_eks_assign=false
fi

# source $DOCLI_DIR/functions/bash_basic_functions
# source $DOCLI_PROJECT_ROOT/.docli

[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n**** Running $sso_file_name_upper script ****"

sso_print_usage() {
  echo
  banner
  echo "  $sso_file_name_upper v$sso_version"
  echo "'--------------------------------------------------------'"
  echo
  echo "Usage: $0 <aws_profile> [OPTIONS]"
  echo
  echo "sso clean          -> Cleans all AWS SSO Tokens (CLI and SSO caches)"
  echo "sso <aws_profile>  -> Connect to the desired AWS SSO profile. (For more info how to configure go to https://devops.click/)"
  echo
  print_options
  exit 1
}

# Load Help
echo "args_help=${args_help:-}"
[[ ${args_help:-} == "$sso_file_name" ]] && sso_print_usage

check_aws_profile() {
  if [ $# -eq 0 ]; then
    echo "** ERROR: profile name is required **"
    sso_print_usage
  elif ! grep -q "$1" ~/.aws/config; then
    echo "** ERROR: profile $1 name is required **"
    return 0
  else
    export AWS_PROFILE="$1"
    echo "*-* $AWS_PROFILE profile found on ~/.aws/config **"
  fi
}

check_aws_con() {
  check_aws_con=$(aws sts get-caller-identity --query "Account" --output text)
}

check_file_age() {
  # Define the directories to check
  DIR1="$HOME/.aws/cli/cache/"
  DIR2="$HOME/.aws/sso/cache/"

  # Find .json files older than 9 hours in both directories
  OLD_FILES_DIR1=$(find "$DIR1" -name "*.json" -type f -mmin +420)
  OLD_FILES_DIR2=$(find "$DIR2" -name "*.json" -type f -mmin +420)

  [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** Checking SSO json files for token age..."

  # If old files are found in either directory, clear both directories
  if [[ -n "$OLD_FILES_DIR1" ]] || [[ -n "$OLD_FILES_DIR2" ]]; then
    [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** Old files detected. Clearing both directories..."

    # Use find to delete .json files in each directory to ensure only those files are removed
    find "$DIR1" -name "*.json" -type f -exec rm {} \;
    find "$DIR2" -name "*.json" -type f -exec rm {} \;
  else
    return 0
  fi
}

sso_clean() {
  check_os_mac_linux_only
  if [[ $os == "macos" ]]; then
    find ~/.aws/cli/cache -name '*.json' -delete -print 2>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** SSO CLI tokens already cleaned. (~/.aws/cli/cache/) **"
    find ~/.aws/sso/cache -name '*.json' -delete -print 2>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** SSO tokens already cleaned. (~/.aws/sso/cache/) **"
    find ~/.aws -name 'credentials-*' -delete -print 2>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** Old Credentials already cleaned. (~/.aws/credentials-*) **"
  elif [[ $os == "linux" ]]; then
    rm -rf ~/.aws/cli/cache/*.json &>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** SSO CLI tokens already cleaned. (~/.aws/cli/cache/) **"
    rm -rf ~/.aws/sso/cache/*.json &>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** SSO tokens already cleaned. (~/.aws/sso/cache/) **"
    rm -rf ~/.aws/credentials-* &>/dev/null || [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo "** Old Credentials already cleaned. (~/.aws/credentials-*) **"
  else
    echo "** ERROR: Not running MacOS or Linux. Could not clean SSO Credentials. **"
    return 0
  fi
  [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "** SSO tokens cleaned successfully. **"
  a=0 # Keep this line here...
}

sso_login() {
  aws sso login --sso-session $DOCLI_PROJECT_SSO_SESSION
}

# TODO: Make this work with MFA (If possible) to get a longer session life
sso_login_mfa() {
  if [ -z ${sso_option2} ]; then
    read -rp $'\033[1;32m** Enter the MFA token code: \033[0m' token_code
    export token_code="${token_code}"
  else
    export token_code="${sso_option2}"
  fi

  aws sts get-session-token \
  --duration-seconds 129600 \
  --serial-number "$DOCLI_PROJECT_MFA_DEVICE" \
  --token-code "$token_code" \
  --profile "$DOCLI_PROJECT_CLIENT-$DOCLI_PROJECT_ENTERPRISE_SRG-$DOCLI_PROJECT_ENTERPRISE_ENV-sso" \
  --debug
}

# Keep trying to set EKS Cluster to KubeConfig Context until successfully connected.
eks_login() {
  local eks_cluster=$1
  local region=$2
  local local_aws_profile=$3

  export AWS_PROFILE=$local_aws_profile

  while true; do
    # TODO: Assign function to auto-get tenant for $DOCLI_PROJECT_CURRENT_TENANT
    aws eks update-kubeconfig --name $DOCLI_PROJECT_CURRENT_TENANT-eks-$sso_env-$sso_short_region-v01 --alias $sso_env
    if [[ $? -eq 0 ]]; then
      echo "Successfully updated kubeconfig."
      break
    else
      echo "Failed to update kubeconfig. Retrying in 5 seconds..."
      sleep 5
    fi
  done
}

sso() {
  input="${1:-${DOCLI_PROJECT_SSO_SESSION:-}}"
  [[ $input == "clean" ]] && sso_clean && exit 0 || echo ""
  sso_client="${input%%-*}"
  sso_env="${input##*-}"
  sr_tmp="${input#*-}"
  sso_short_region="${sr_tmp%%-*}"
  sso_profile="$input-sso"
  check_aws_profile "$sso_profile"
  check_aws_profile "$sso_profile-start"

  check_file_age

  # check_aws_con=$(aws sts get-caller-identity --query "Account" --output text)
  local check_aws_con_profile=$(aws sts get-caller-identity --query "Account" --profile $sso_profile --output text)
  echo "** AWS Account: $check_aws_con_profile"
  if [[ $check_aws_con_profile > 0 ]]; then
    echo "** Already connected to AWS SSO using profile '$sso_profile' on account '$check_aws_con_profile' **"
    export AWS_PROFILE="${sso_profile}-start"
    [[ $sso_short_region == "euc1" ]] && export AWS_REGION="eu-central-1" # TODO: Do this dinamically, with convert function.
    # [[ $sso_eks_assign == true ]] && aws eks update-kubeconfig --name $DOCLI_PROJECT_CURRENT_TENANT-eks-$sso_env-$sso_short_region-v01 --alias $sso_env || echo "** EKS Cluster $DOCLI_PROJECT_CURRENT_TENANT-eks-$sso_env-$sso_short_region-v01 NOT found! ***"
    [[ $sso_eks_assign == true ]] && eks_login "$DOCLI_PROJECT_CURRENT_TENANT-eks-${sso_env}-${sso_short_region}-v01" "${sso_env}" "${AWS_PROFILE}" || echo "** Could not execute eks login **"
  else
    echo "** Not connected to AWS SSO using profile '$sso_profile' **"
    echo "** Connecting... **"
    sso_clean

    aws sso login --sso-session $DOCLI_PROJECT_SSO_SESSION
    export AWS_PROFILE="${sso_profile}-start"
    [[ $sso_short_region == "euc1" ]] && export AWS_REGION="eu-central-1" # TODO: Do this dinamically, with convert function.
    [[ $sso_eks_assign == true ]] && eks_login "$DOCLI_PROJECT_CURRENT_TENANT-eks-${sso_env}-${sso_short_region}-v01" "${sso_env}" "${AWS_PROFILE}"
    check_aws_con
    [[ $check_aws_con > 0 ]] && echo -e "** SSO Connected! **\n" || echo -e "** ERROR: Could not connect to $sso_profile SSO. Please review your settings. **\n"
  fi
}

# main() {
#   # if [[ $sso_option == sso ]]
#   # trap 'catch $? $LINENO' EXIT
#   # banner
#   # Error checking. Substituted by catch
#   # if [ $? -ne 0 ]; then
#   #     echo "Error: Terraform command failed."
#   #     exit 1
#   # fi
#   [[ $sso_eks_assign == "true" ]] && sso $sso_option && return 0
#   [[ $sso_option == "mfa" ]] && check_file_age && sso_login_mfa
#   [[ $sso_option == "clean" ]] && sso_clean && return 0 || echo ""
#   [[ -z $sso_option ]] && echo "** ERROR: No options provided **" && sso_print_usage && exit 0
#   sso $sso_option
# }

# # Calls main with args
# main "$@"