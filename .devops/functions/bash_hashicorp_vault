#!/usr/bin/env bash
# [[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
# [[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
###############################################################################
#                       docli HashiCorp Vault
###############################################################################
# TODO: CHECK SIMILARITIES AND CLEAN DUPLICATED CODE WITH bash_k8s_secrets

## DOCLI MODULE INFORMATION
[[ "${BASH_SOURCE[0]}" != "" ]] && REAL_PATH=$(realpath "${BASH_SOURCE[0]}") || REAL_PATH=$(realpath "$0")
DOCLI_MODULE_VERSION=0.0.01
DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"
DOCLI_MODULE_TYPE="$(basename "$(dirname "$($REAL_PATH)")")"
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
PRIVATE_DIR=../../private
source ./bash_op

k8s_hashicorp_vault_init() {
  # PGP encrypt keys if needed...
  # -recovery-pgp-keys="keybase:jeff,keybase:chris,keybase:brian,keybase:calvin,keybase:matthew,keybase:vishal,keybase:nick"

  # NON-KMS
  # echo "** Unseal Vault and save keys **"
  # kubectl exec vault-0 -- vault operator init -key-shares=1 -key-threshold=1 -format=json > vault_keys.json # NON-KMS Option
  # VAULT_UNSEAL_KEY=$(cat vault_keys.json | jq -r ".unseal_keys_b64[]")
  # echo $VAULT_UNSEAL_KEY
  # VAULT_ROOT_KEY=$(cat vault_keys.json | jq -r ".root_token")
  # echo $VAULT_ROOT_KEY

  #### KMS ####
  echo "** Unseal Vault and save keys **"
  kubectl exec vault-0 -- vault operator init -recovery-shares=5 -recovery-threshold=3 -format=json > vault_keys.json # KMS Option - AutoUnseal

  VAULT_UNSEAL_KEY=$(cat vault_keys.json | jq -r ".recovery_keys_b64[]")
  echo $VAULT_UNSEAL_KEY
  VAULT_ROOT_KEY=$(cat vault_keys.json | jq -r ".root_token")
  echo $VAULT_ROOT_KEY
}

hashicorp_vault_register_sso() {
  vault write auth/oidc/config \
    oidc_client_id="${AD_VAULT_APP_ID}" \
    oidc_client_secret="${AD_CLIENT_SECRET}" \
    default_role="${VAULT_LOGIN_ROLE}" \
    oidc_discovery_url="https://login.microsoftonline.com/${AD_TENANT_ID}/v2.0"
}

hashicorp_vault_create_roles() {
  vault write auth/oidc/role/admins \
    user_claim="email" \
    allowed_redirect_uris="http://localhost:8250/oidc/callback" \
    allowed_redirect_uris="https://vault.${short_region}.${environment}.${product_url}/ui/vault/auth/oidc/oidc/callback"  \
    policies="admins" \
    oidc_scopes="https://graph.microsoft.com/.default"
}

hashicorp_vault_setup_oidc() {
  op_check_connection
  op_get_document ".${short_region}_${environment}_${app}_azuread

  source $PRIVATE_DIR/.euc1_ent_vault_azuread

  vault auth enable oidc
}


custom_app="${additional_field:-}"
force=true
source $DIR/bash_basic_functions
## After loading basic_functions...
if [[ $custom_option == "secret" ]]; then
  split_aws_profile_string $DOCLI_PARAM_BACKEND_PROFILE # Returns: profile_client|profile_env|profile_short_region|profile_sso`
  [[ $custom_app != "" ]] && k8s_secrets_secret_name="${profile_short_region}-${profile_env}-k8s-${custom_app}" || k8s_secrets_secret_name="${profile_short_region}-${profile_env}-k8s"
  k8s_secrets_source_file=$(replace_dash_with_underline $k8s_secrets_secret_name)
  k8s_secrets_source_path="$DIR/../../private/."
  k8s_secrets_source="${k8s_secrets_source_path}${k8s_secrets_source_file}"
  [[ $custom_option == "secret" ]] && source $k8s_secrets_source

  [[ $force == true ]] && echo -e "\n**** FORCE DETECTED. Variable will be forcible recreated if it exists! ****\n"
fi
if [[ $additional_field == "vault" ]]; then
  k8s_namespace="$additional_field"
else
  k8s_namespace="$custom_environment"
fi

k8s_secrets_check_file_exists_hash() {
  echo -e "\n** Checking Secrets + Hash diff... **"

  local source_file=$k8s_secrets_source
  local last_hash="$k8s_secrets_source.lasthash"

  # Calculate current hash and store it in a variable
  local current_hash=$(calculate_md5 "$source_file")
  echo "** current_hash: $current_hash"

  # Check if the last hash file exists
  if [[ -f "$last_hash" ]]; then
    # Read the content of the last hash file
    last_hash_content=$(<"$last_hash")
    echo "** last_hash_content: $last_hash_content"


    # Compare the current hash with the last hash
    if [[ "$current_hash" == "$last_hash_content" ]]; then
      echo "** Source file has not changed, proceeding..."
      # return 0
    else
      echo "$current_hash" > "$last_hash"
    fi
  else
    # If the last hash file doesn't exist, create it and write the current hash
    echo "$current_hash" > "$last_hash"
  fi
  echo -e "** Secrets Checks: OK **\n"
}

k8s_secrets_check_kubernetes_secret() {
  quick_check_aws_con
  echo -e "\n** Checking k8s Secret existence... **"
  if kubectl get secret "$k8s_secrets_secret_name" -n "$k8s_namespace" --profile "${awsprofile}" > /dev/null 2>&1; then
    echo "** Secret $k8s_secrets_secret_name exists in namespace $k8s_namespace. Updating key..."
    secret_exists=true
  else
    echo "** Secret $k8s_secrets_secret_name does not exist in namespace $k8s_namespace. Creating key..."
    secret_exists=false
  fi
  echo -e "** k8s secrets: OK **\n"
}

k8s_secrets_read_lines_kubernetes_secret() {
  check_aws_con
  echo -e "\n** Reading $k8s_secrets_source lines... **"
  # Read each line from the "k8s_secrets_source" file
  while IFS= read -r line || [[ -n "$line" ]]; do
    # Skip empty lines and lines starting with '#'
    [[ -z "$line" || "$line" =~ ^\s*# ]] && continue

    # Extract the variable name and value from the line
    variable_name=$(echo "$line" | cut -d'=' -f1)
    variable_value=$(echo "$line" | cut -d'=' -f2-)
    echo "** $variable_name **"
    # echo $variable_value

    # Trim leading and trailing spaces from the value
    variable_value=$(echo "$variable_value" | xargs)
    # echo $variable_value

    k8s_secrets_update_kubernetes_secret "$variable_name" "$variable_value"

  done < $k8s_secrets_source
  echo -e "** Lines Read and Apply: OK **\n"
}

k8s_secrets_create_kubernetes_secret() {
  quick_check_aws_con
  echo -e "\n** Creating/Re-Creating Secrets... **"
  [[ $force == true ]] && k8s_secrets_delete_kubernetes_secret
  # kubectl create secret generic "" -n ent --save-config
  kubectl create secret generic "$k8s_secrets_secret_name" -n "$k8s_namespace" --save-config
  echo -e "** Creating/Re-Creating Secrets: OK ($k8s_secrets_secret_name) **\n"
}

k8s_secrets_delete_kubernetes_secret() {
  quick_check_aws_con
  echo -e "\n** Deleting secret $k8s_secrets_secret_name... **"
  kubectl delete secret "${k8s_secrets_secret_name}" -n "${k8s_namespace}" --ignore-not-found || echo ""
  echo -e "** Deleting secret: OK ($k8s_secrets_secret_name) **\n"
}

k8s_secrets_update_kubernetes_secret() {
  local variable_name="$1"
  local variable_value="$2"

  kubectl get secret "$k8s_secrets_secret_name" -n "$k8s_namespace" -o json | jq --arg foo "$(echo -n "$variable_value" | base64)" '.data["'"$variable_name"'"]=$foo' | kubectl apply -f -
  # 'before'"$variable_name"'after'
  # 'before'"'"'after'
  # 'before'\''after'
}

quick_check_aws_con() {
  check_aws_con_acc=$(aws sts get-caller-identity --query "Account" --output text)
  [[ $check_aws_con_acc > 0 ]] && echo -e "** SSO Connected! **" || echo -e "** ERROR: Could not connect to $sso_profile SSO. Please review your settings. **\n"
}

check_aws_con() {
  check_aws_con_acc=$(aws sts get-caller-identity --query "Account" --output text)
  check_aws_con_arn=$(aws sts get-caller-identity --query "Arn" --output text)
  check_aws_con_uid=$(aws sts get-caller-identity --query "UserId" --output text)
  check_k8s_context=$(kubectl config current-context)
  check_running_usr=$(whoami)
  [[ $check_aws_con_acc > 0 ]] && echo -e "******************** SSO Connected! ********************\n" || echo -e "** ERROR: Could not connect to $sso_profile SSO. Please review your settings. **\n"
  echo "********** AWS Connection Used Configuration: **********"
  echo "Account ID     : $check_aws_con_acc"
  echo "Role/User Arn  : $check_aws_con_arn"
  echo "User ID        : $check_aws_con_uid"
  echo "Kubectl Context: $check_k8s_context"
  echo "OS User        : $check_running_usr"
  echo "User ID        : $check_aws_con_uid"
  echo "********************************************************"
  aws configure list
  kubectl cluster-info
  echo
}
