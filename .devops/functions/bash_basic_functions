#!/usr/bin/env bash
# [[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
# [[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################
# PS: This script is intended to be used as source for others.
# Basic Bash Functions
###############################################################################

## DOCLI MODULE INFORMATION
DOCLI_MODULE_VERSION="0.0.01"
DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"
DOCLI_MODULE_TYPE="$(basename "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")"
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

# Prevents script from being called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "* $DOCLI_MODULE: This module cannot be called directly! Exiting... *"
  exit 1
fi

# Setting PATH
export DOCLI="${DOCLI:-$HOME/devops}"
export DOCLI_DIR="${DOCLI_DIR:-$DOCLI}"
PATH="${DOCLI_DIR:-/opt/devops}/bin:/opt/homebrew/bin:/usr/sbin:/sbin:/usr/bin:/bin:/usr/local/bin:/usr/local/sbin:$HOME/devops/bin:$PATH"

banner() {
  local version="${1:-}"
  local print_version=$([[ -f $version ]] && echo "v${version}")
  echo ",--------------------------------------------------------,"
  echo "|  ____              ___                  _ _      _     |" #dltbr
  echo "| |  _ \  _____   __/ _ \ _ __  ___   ___| (_) ___| | __ |" #dltbr
  echo "| | | | |/ _ \ \ / / | | | '_ \/ __| / __| | |/ __| |/ / |" #dltbr
  echo "| | |_| |  __/\ V /| |_| | |_) \__ \| (__| | | (__|   <  |" #dltbr
  echo "| |____/ \___| \_/  \___/| .__/|___(_)___|_|_|\___|_|\_\ |" #dltbr
  echo "|                        |_|                             |" #dltbr
  echo "|                                          docli v$DOCLI_MODULE_VERSION |"
  echo "|--------------------------------------------------------|" #dltbr
  echo "|   https://DevOps.click - DevOps taken seriously >:)    |" #dltbr
  echo "'--------------------------------------------------------'" #dltbr
#   echo "                     $bash_base_get_arguments_file_name_upper $version"
#   echo "'--------------------------------------------------------'"
}

print_options() {
  echo "Options:"
  echo "  -v,  --verbose [true|false]               Turn on verbose"
  echo "  -d,  --debug [true|false]                 Turn on DEBUG mode"
  echo "  -i,  --ignore-questions                   Ignore questions (always yes)"
  echo "  -s,  --silent                             Silent for CI/CD pipelines"
  echo "  -h,  --help                               Show this help message"
  echo "  -e,  --envs                               Show DevOps.Click CLI loaded envs"
  echo "  -u,  --update                             Update DevOps.Click CLI to latest version"
  echo "  -um, --update-minimal                     Update DevOps.Click CLI binaries and configs only (no package updates)"
  echo "  -v,  --version                            Show DevOps.Click CLI version"
  echo "  -vs, --version-short                      Show only version number of DevOps.Click CLI"
  echo "  -upg,--upgrade                            Fully upgrade DevOps.Click CLI (cannot skip)"
  exit 1
}

#:: #
#:: ## Usage example:
#:: ``
declare -a args=()
# Check if the variable is set and if not, set it to its default value
: "${DOCLI_ARGS_VERBOSE:=0}"
: "${DOCLI_ARGS_DEBUG:=0}"
: "${args_ignore_questions:=0}"
: "${args_silent:=0}"

: "${DOCLI_VERBOSE:=}"
: "${DOCLI_DEBUG:=}"

# Creates Optional DOCLI Variables if not exists
: "${DOCLI_REPOSITORY:=}"
: "${DOCLI_DEVELOPER_MODE:=false}"

load_vars() {
  # Validations to activate modes:
  DOCLI_VERBOSE="[[ $DOCLI_ARGS_VERBOSE == 1 || $DOCLI_ARGS_DEBUG == 1 ]]"
  DOCLI_DEBUG="[[ $DOCLI_ARGS_DEBUG == 1 ]]"
  scape=x
}

#:: # Function to calculate MD5 hash of a file and store into a variable
#:: ## Usage example:
#:: `current_hash=$(calculate_md5 "$source_file")`
calculate_md5() {
  md5sum "$1" | awk '{ print $1 }'
}

### THIS IS NOT the --version function!!!
#:: # Function to check DOCLI Version and execute an update if needed
#:: # disabled if DOCLI_UPDATES=false found
#:: ## Usage example:
#:: `check_docli_version`
# check_docli_version() {
#   # Check if DOCLI_UPDATES variable exists and it is set to false, otherwise, proceed to update.
#   DOCLI_UPDATES="${DOCLI_UPDATES:-true}"
#   if [ "$DOCLI_UPDATES" != "false" ]; then
#     echo "* INFO: DOCLI_UPDATES is true. checking for if any update is needed... *"
#     docli_current_version=$(docli --version-short)
#     # docli_newest_version=$(curl -ksv https://...) # TODO: Create check with GitHub deployment versions
#     docli_newest_version=$(docli --version-short)
#     if [[ $docli_current_version == $docli_newest_version ]]; then
#       echo "* INFO: Running version of DOCLI is already up-to-date ($docli_newest_version) *"
#     else
#       docli update
#     fi
#   else
#     echo "* WARN: DOCLI_UPDATES is set to false, skipping any updates... *"
#   fi
# }

#:: # Function to work with any needed module update
#:: ## Usage example:
#:: `check_new_versions <module> <local_version> <remote_version> <update_command>`
check_new_versions() {
  local MODULE=$1
  local MODULE_UPPER=$(echo "$MODULE" | tr '[:lower:]' '[:upper:]')
  local V_LOCAL=$2
  local V_REMOTE=$3
  # local UPDATE_CMD=${4:-docli -um}

  if [[ $V_LOCAL < $V_REMOTE ]]; then
    echo -e "\n* NEW $MODULE_UPPER VERSION $V_REMOTE FOUND! (Current version: $V_LOCAL) *"
    read -p "* Press (y) to proceed with the automatic update or any other key to skip: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      export APPLY_UPDATE=true
      # eval $UPDATE_CMD
    else
      export APPLY_UPDATE=false
      echo "* Update skipped *"
    fi
  else
    [[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n* $MODULE_UPPER UP TO DATE | Current version: $V_REMOTE | Installed version: $V_LOCAL *" || true
  fi
}

#:: # Function to clean needed vars that may be set by processes
#:: ## Usage example:
#:: `docli_params_load`
docli_params_load() {
  ## ACCEPTS ONLY option as parameter without -|--
  ###########################################
  # NEW INPUT VARS
  ############################################
  ### DEFAULTS TO ENTERPRISE

  export DOCLI_PARAM_MODULE=${DOCLI_PARAM_MODULE:-terraform}

  # Define a whitelist of allowed values if DOCLI_PARAM_OPTIONS does not exist
  if [[ -z $DOCLI_PARAM_OPTIONS ]]; then
    DOCLI_PARAM_OPTIONS=("apply" "apply_force" "destroy" "destroy_force" "build")
  fi

  # Initialize an array to store non-flag arguments
  DOCLI_PARAM_OPTION=()

  # Iterate through all arguments
  for arg in "$@"; do
    # Check if the argument does not start with - or --
    if [[ ! $arg =~ ^- ]]; then
      # Check if the argument is in the allowed values list
      if [[ " ${DOCLI_PARAM_OPTIONS[@]} " =~ " $arg " ]]; then
        # Append the argument to the array
        DOCLI_PARAM_OPTION+=("$arg")
      else
        echo "* Invalid DOCLI_PARAM_OPTION: $arg *"
        echo "* You MUST provide a valid Option! *"
        exit 0
      fi
    fi
  done
  # Print the non-flag arguments
  echo "* Valid DOCLI_PARAM_OPTION: ${DOCLI_PARAM_OPTION[@]:-}"

  ## Get only the first valid option:
  export DOCLI_PARAM_OPTION=${DOCLI_PARAM_OPTION[0]:-${DOCLI_PARAM_OPTION:-apply}}

  : "${DOCLI_PARAM_FORCE:=false}}"
  : "${DOCLI_PARAM_FUNNY_MODE:=false}}"
  : "${DOCLI_PARAM_DEBUG:=false}}"
  : "${DOCLI_PARAM_VERBOSE:=false}}"
  : "${DOCLI_PARAM_SILENCE:=false}}"
  : "${DOCLI_PARAM_SSO:=false}}"
  : "${DOCLI_PARAM_CON_TYPE:=""}}"
  : "${DOCLI_PARAM_CLIENT:=$DOCLI_PROJECT_CLIENT}}"
  # : "${DOCLI_PARAM_ENV:=$DOCLI_PROJECT_ENTERPRISE_ENV}}"
  : "${DOCLI_PARAM_ENV:=""}}"
  # : "${DOCLI_PARAM_REGION:=$DOCLI_PROJECT_ENTERPRISE_SRG}}"
  : "${DOCLI_PARAM_REGION:=""}}"
  : "${DOCLI_PARAM_CLOUD:=aws}}"
  : "${DOCLI_PARAM_REMOTE_STATE:=s3}}"
  : "${DOCLI_PARAM_SHORT_REGION:=$DOCLI_PROJECT_ENTERPRISE_SRG}}"

  # Additional Parameters (Used in some docli functions like runtf state_show or import)
  : "${DOCLI_PARAM_ARG1:=""}}"
  : "${DOCLI_PARAM_ARG2:=""}}"
  : "${DOCLI_PARAM_ARG3:=""}}"

  # Used in specific modules
  : "${DOCLI_PARAM_BITB_REPO:=}}"

  # Iterate over all arguments
  # ONLY SET WHEN PARAMETER IS SPECIFIED...
  while [[ "$#" -gt 0 ]]; do
    case $1 in
      # --profile=*)
      #   setup_select_profile="${1#*=}"
      #   # selected_profiles+=("${arg#*=}")
      #   ;;
      -f|--force)
        export DOCLI_PARAM_FORCE=true
        if [[ -z $DOCLI_PARAM_OPTION ]] || [[ $DOCLI_PARAM_OPTION == "" ]]; then
          echo -e "\n* ERROR: Can't specify -f|--force without specifying an option! *\n"
          exit 1
        fi
        echo opt_DOCLI_PARAM_FORCE=$DOCLI_PARAM_FORCE
        ;;
      -fun|--funny-mode)
        export DOCLI_PARAM_FUNNY_MODE=true
        echo opt_DOCLI_PARAM_FUNNY_MODE=$DOCLI_PARAM_FUNNY_MODE
        ;;
      -d|--debug)
        export DOCLI_PARAM_DEBUG=true
        echo opt_DOCLI_PARAM_DEBUG=$DOCLI_PARAM_DEBUG
        ;;
      -v|--verbose)
        export DOCLI_PARAM_VERBOSE=true
        echo opt_DOCLI_PARAM_VERBOSE=$DOCLI_PARAM_VERBOSE
        ;;
      -s|--silence)
        export DOCLI_PARAM_SILENCE=true
        echo opt_DOCLI_PARAM_SILENCE=$DOCLI_PARAM_SILENCE
        ;;
      -con=*|--connection=*)
        export DOCLI_PARAM_CON_TYPE="${1#*=}"
        echo opt_DOCLI_PARAM_CON_TYPE=$DOCLI_PARAM_CON_TYPE
        ;;
      -sso|--sso)
        export DOCLI_PARAM_SSO=true
        export DOCLI_PARAM_CON_TYPE="sso"
        echo opt_DOCLI_PARAM_SSO=$DOCLI_PARAM_SSO
        ;;
      -c=*|--client=*)
        export DOCLI_PARAM_CLIENT="${1#*=}"
        echo opt_DOCLI_PARAM_CLIENT=$DOCLI_PARAM_CLIENT
        ;;
      -e=*|--env=*)
        export DOCLI_PARAM_ENV="${1#*=}"
        echo opt_DOCLI_PARAM_ENV=$DOCLI_PARAM_ENV
        ;;
      -r=*|--region=*)
        export DOCLI_PARAM_REGION="${1#*=}"
        echo opt_DOCLI_PARAM_REGION=$DOCLI_PARAM_REGION
        ;;
      -cld=*|--cloud=*)
        export DOCLI_PARAM_CLOUD="${1#*=}"
        echo opt_DOCLI_PARAM_CLOUD=$DOCLI_PARAM_CLOUD
        ;;
      -rs=*|--remote-state=*)
        export DOCLI_PARAM_REMOTE_STATE="${1#*=}"
        echo opt_DOCLI_PARAM_REMOTE_STATE=$DOCLI_PARAM_REMOTE_STATE
        ;;
      -sr=*|--short-region=*)
        export DOCLI_PARAM_SHORT_REGION="${1#*=}"
        echo opt_DOCLI_PARAM_SHORT_REGION=$DOCLI_PARAM_SHORT_REGION
        ;;

      -bbr=*|--bitbucket-repository=*)
        export DOCLI_PARAM_BITB_REPO="${1#*=}"
        echo opt_DOCLI_PARAM_BITB_REPO=$DOCLI_PARAM_BITB_REPO
        ;;

      -a1=*|--arg1=*)
        export DOCLI_PARAM_ARG1="${1#*=}"
        echo opt_DOCLI_PARAM_ARG1=$DOCLI_PARAM_ARG1
        ;;
      -a2=*|--arg2=*)
        export DOCLI_PARAM_ARG2="${1#*=}"
        echo opt_DOCLI_PARAM_ARG2=$DOCLI_PARAM_ARG2
        ;;
      -a3=*|--arg3=*)
        export DOCLI_PARAM_ARG3="${1#*=}"
        echo opt_DOCLI_PARAM_ARG3=$DOCLI_PARAM_ARG3
        ;;

      *)
        # Assign the first non-flag argument to option
        if [[ -z $DOCLI_PARAM_OPTION ]]; then
          DOCLI_PARAM_OPTION=$1
        fi
        ;;
    esac
    shift
  done

  ## When no parameter passed. Using System Variables only in case of ./runtf
  # if [[ $DOCLI_PARAM_FORCE == true ]]; then
  #   export DOCLI_PARAM_FORCE=true
  # fi

  if [[ $DOCLI_PARAM_CLOUD == "" ]]; then
    export DOCLI_PARAM_CLOUD=aws
  fi

  if [[ $DOCLI_PARAM_CON_TYPE == "sso" ]]; then
    export DOCLI_PARAM_SSO=true
  elif [[ $DOCLI_PARAM_CON_TYPE == "vault" ]]; then
    export DOCLI_PARAM_SSO=false
  else
    export DOCLI_PARAM_CON_TYPE=""
    export DOCLI_PARAM_SSO=false
  fi
}


#:: # Function to clean needed vars that may be set by processes
#:: ## Usage example:
#:: `clean_vars`
clean_vars() {
  unset AWS_PROFILE
  unset AWS_DEFAULT_PROFILE
  unset AWS_REGION
  unset AWS_DEFAULT_REGION
}

#:: # Check duplicated entries in file
#:: ## Usage example:
#:: `check_duplicates "$file"`
check_duplicates() {
  local file="$1"

  if [ ! -f "$file" ]; then
    echo "Error: The specified file does not exist."
    return 1
  fi

  # Sort the lines in the file
  sorted_file="$(sort "$file")"

  # Use uniq to identify and count duplicate lines
  duplicates="$(uniq -d <<< "$sorted_file")"

  # Print the duplicate lines
  if [ -n "$duplicates" ]; then
    echo "Duplicate lines in $file:"
    echo "$duplicates"
  else
    echo "No duplicate lines found in $file."
  fi
}

#:: # Check execution folder FORCING USER TO RUN FROM INSIDE THE SCRIPT FOLDER
#:: ## Usage example:
#:: `check_execution_folder`
# Function to check if script is called from the correct directory
function check_directory() {
    local expected_dir="$1"
    local current_dir="$(pwd)"

    if [ "$current_dir" != "$expected_dir" ]; then
        echo "ERROR: Please run this script from '$expected_dir' directory."
        exit 1
    fi
}

#:: # Check file existence
#:: ## Usage example:
#:: `result=$(check_file_exists "$file")`
check_file_exists() {
  local file_source=$1
  [[ -f !$file_source ]] && exit 0 && echo "** ERROR: $file_source file does not exist" || echo -e "\n** File $file_source exists! Proceeding..."
}

#:: # Check if the script is running on macOS or Linux
#:: ## Usage example:
#:: `check_os_mac_linux_only`
check_os_mac_linux_only() {
  os_var=$(uname)
  if [ "$os_var" == "Darwin" ]; then
    os="macos"
  elif [ "$os_var" == "Linux" ]; then
    os="linux"
  else
    echo "** ERROR: Supported only by MacOS and Linux. **"
    exit 1
  fi
}

# Function to check if a value is in an array
contains() {
  local value="$1"
  shift
  for item; do
    [[ "$item" == "$value" ]] && return 0
  done
  return 1
}

#:: # Convert the value to lowercase
#:: ## Usage example:
#:: `result=$(convert_to_lowercase "$input")`
convert_to_lowercase() {
  local input_string="$1"
  local modified_string=$(echo "$input_string" | tr '[:upper:]' '[:lower:]')
  echo "$modified_string"
}

#:: # Convert the value to uppercase
#:: ## Usage example:
#:: `result=$(convert_to_uppercase "$input")`
convert_to_uppercase() {
  local input_string="$1"
  local modified_string=$(echo "$input_string" | tr '[:lower:]' '[:upper:]')
  echo "$modified_string"
}

#:: # Function redirect help output
#:: ## Usage example:
#:: help_x=$(help_index "$docli_command")
#:: echo "$help_x"  # Output: bash_op
help_index() {
  case "${1:-}" in
    "sso") echo "main/sso";;
    "tf") echo "main/tf";;
    "op") echo "functions/bash_op";;
    "sys") echo "main/sys";;
    "docli") echo "bin/docli";;
    *) echo "${1:-bin/docli}";;
  esac
}

#:: # Function to convert region to short_region
#:: ## Usage example:
#:: short_region=$(region_to_short_region "$region")
#:: echo "$short_region"  # Output: use1
region_to_short_region() {
  case "$1" in
    "eu-central-1") echo "euc1";;
    "us-east-1") echo "use1";;
    "us-east-2") echo "use2";;
    "ap-southeast-2") echo "apse2";;
    "sa-east-1") echo "sae1";;
    *) echo "$1";;
  esac
}

# Utility function to shift elements of an array
shift_array() {
    local -n arr=$1
    arr=("${arr[@]:1}")
}

# Function to convert short_region to region
# Usage example:
# region=$(short_region_to_region "$short_region")
# echo "$region"  # Output: eu-central-1
short_region_to_region() {
  case "$1" in
    "euc1") echo "eu-central-1";;
    "use1") echo "us-east-1";;
    "use2") echo "us-east-2";;
    "apse2") echo "ap-southeast-2";;
    "sae1") echo "sa-east-1";;
    *) echo "$1";;
  esac
}

# Function to find custom_tenant depending of the value provided: region or short_region
# Usage example:
# custom_tenant=$(region_to_custom_tenant "$region_or_short_region")
# echo "$custom_tenant"  # Output example: dc-eu
region_to_custom_tenant() {
    local input_value="$1"

    # Check for regions first
    case "$input_value" in
        "eu-central-1") echo "dc-eu";;
        "us-east-1") echo "dc-us";;
        "us-east-2") echo "dc-us";;
        "sa-east-1") echo "dc-sa";;
        "ap-southeast-2") echo "dc-au";;
        *)
            # If not found in regions, check short_regions
            case "$input_value" in
                "euc1") echo "dc-eu";;
                "use1") echo "dc-us";;
                "use2") echo "dc-us";;
                "sea1") echo "dc-sa";;   # This seems to be a typo in your mapping. I assume it should correspond to sa-east-1
                "apse2") echo "dc-au";;
                *) echo "Unknown value";;
            esac
        ;;
    esac
}

#:: # Function to replace - with _
#:: ## Usage example:
#:: `result=$(replace_dash_with_underline "$input")`
replace_dash_with_underline() {
  local input_string="$1"
  local modified_string=$(echo "$input_string" | sed 's/-/_/g')
  echo "$modified_string"
}

#:: # Function to flag resources to be run only once. Even if they are
#:: # sourced or called by other subsequential scripts multiple times.
#:: ## Usage example:
#:: `run_once`
# Define a flag to track if the function has already been executed
: "${_modules_list:=()}"
run_once() {
  local _module_name=${1:-""}
  echo _module_name=$_module_name
  echo _modules_list=$_modules_list

  # Check if the module name is provided
  if [ -z "$_module_name" ]; then
    echo "* Error: DOCLI_MODULE is not being passed to this script."
    return 1
  fi

  # Check if the module has already been executed
  if [[ " ${_modules_list[@]} " =~ " ${_module_name} " ]]; then
    echo "* run_once: $_module_name - Function has already been run, skipping... *"
    return 0
  fi

  echo "* run_once: $_module_name - Function not runned yet. running now! *"
  eval $2

  # Add the module to the list after successful execution
  _modules_list+=("$_module_name")
}

#:: # Function to replace - with _
#:: ## Usage example:
#:: `split_aws_profile_string "$input"`
#:: Returns: profile_client|profile_env|profile_short_region|profile_sso`
split_aws_profile_string() {
  local input=$1
  profile_client="${input%%-*}"
  profile_env="${input##*-}"
  profile_short_region_tmp="${input#*-}"
  profile_short_region="${profile_short_region_tmp%%-*}"
  profile_sso="$input-sso"
}

#:: # Function to check if package is already installed on MacOS, Linux RedHat or Ubuntu Based. If not, install it.
#:: ## Usage example:
#:: `check_installed_package "<package_name>"`
#:: ex: check_installed_package git
check_installed_package() {
  local package="$1"

  echo -e "\n** Function ${FUNCNAME[0]} called **"
  if [[ -z "$package" ]]; then
    echo "** ERROR: No package specified **"
    return 1
  fi

  echo "** Checking if local system has $package installed. If not, we will install it... **"

  # Detect the platform.
  if type apt-get &>/dev/null; then
    # Ubuntu/Debian
    echo "** Detected Ubuntu/Debian. Proceeding... **"
    if ! dpkg-query -W -f='${Status}' "$package" 2>/dev/null | grep -q "ok installed"; then
      sudo apt-get update
      sudo apt-get install -y "$package"
    else
      echo -e "** $package already installed **\n"
    fi
  elif type yum &>/dev/null; then
    # Red Hat/CentOS
    echo "** Detected RedHat/CentOS. Proceeding... **"
    if ! rpm -q "$package" &>/dev/null; then
      sudo yum install -y "$package"
    else
      echo -e "** $package already installed **\n"
    fi
  elif type brew &>/dev/null; then
    # macOS
    echo "** Detected MacOS. Proceeding... **"
    if ! brew list "$package" &>/dev/null; then
      brew install "$package"
    else
      echo -e "** $package already installed **\n"
    fi
  else
    echo "** ERROR: Unsupported platform **"
    return 1
  fi
}

#:: # Function to ask confirmation before proceed.
#:: ## Usage example:
#:: `ask_to_proceed`
ask_to_proceed() {
  return 0
  local response

  while true; do
    read -rp "Do you want to proceed? [y/n] " response
    case $response in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) echo "Please answer with y or n.";;
    esac
  done
}

#:: # Function to return full OS name
#:: ## Usage example:
#:: `full_os_name=$(get_full_os_name "$os_short")`
get_full_os_name() {
  case "$1" in
    al2023) echo "Amazon Linux 2023" ;;
    al2022) echo "Amazon Linux 2022" ;;
    amzn2) echo "Amazon Linux 2" ;;
    ubnt23) echo "Ubuntu 23.x" ;;
    ubnt22) echo "Ubuntu 22.x" ;;
    ubnt20) echo "Ubuntu 20.x" ;;
    ubnt18) echo "Ubuntu 18.x" ;;
    ubnt16) echo "Ubuntu 16.x" ;;
    *) echo "Unknown OS" ;;
  esac
}

#:: # Function to return full architecture name
#:: ## Usage example:
#:: `full_arch_name=$(get_full_arch_name "$os_arch")`
get_full_arch_name() {
  case "$1" in
    arm) echo "arm64" ;;
    amd) echo "x86_64" ;;
    *) echo "Unknown Architecture" ;;
  esac
}

#:: # Function to return any docli module version from file
#:: ## Usage example:
#:: `SOURCE_VERSION=$(get_version "$TEMP_FILE")`
get_version() {
  local file="$1"
  grep 'DOCLI_MODULE_VERSION' "$file" | awk -F'= ' '{print $2}' | tr -d '"'
}

#:: # Function to return current quarter in YYqN format
#:: ## Usage example:
#:: `quarter=$(get_quarter)`
function get_quarter() {
  month=$(date +%m)
  year=$(date +%Y)
  last_two_digits_of_year=${year: -2}

  if [ $month -ge 1 ] && [ $month -le 3 ]; then
    echo "${last_two_digits_of_year}q1"
  elif [ $month -ge 4 ] && [ $month -le 6 ]; then
    echo "${last_two_digits_of_year}q2"
  elif [ $month -ge 7 ] && [ $month -le 9 ]; then
    echo "${last_two_digits_of_year}q3"
  else
    echo "${last_two_digits_of_year}q4"
  fi
}

#:: # Function to return the quarter start date
#:: ## Usage example:
#:: `$(get_quarter_start_date ${quarter})`
function get_quarter_start_date() {
  case $1 in
    *q1)
      echo "20${1:0:2}-01-01"
      ;;
    *q2)
      echo "20${1:0:2}-04-01"
      ;;
    *q3)
      echo "20${1:0:2}-07-01"
      ;;
    *q4)
      echo "20${1:0:2}-10-01"
      ;;
    *)
      echo "Invalid quarter"
      ;;
  esac
}

#:: # Function to return the quarter end date
#:: ## Usage example:
#:: `$(get_quarter_end_date ${quarter})`
function get_quarter_end_date() {
  case $1 in
    *q1)
      echo "20${1:0:2}-03-31"
      ;;
    *q2)
      echo "20${1:0:2}-06-30"
      ;;
    *q3)
      echo "20${1:0:2}-09-30"
      ;;
    *q4)
      echo "20${1:0:2}-12-31"
      ;;
    *)
      echo "Invalid quarter"
      ;;
  esac
}

#:: # Function to return if currently on desired quarter (true/false)
#:: ## Usage example:
#:: `is_current_quarter`
function is_current_quarter() {
  # If MacOS, run compatible date command
  if [[ "$(uname)" == "Darwin" ]]; then
    start_date=$(date -jf "%Y-%m-%d" "${1}" +%s)
    end_date=$(date -jf "%Y-%m-%d" "${2}" +%s)
    current_date=$(date +%s)
  else
    start_date=$(date -d "${1}" +%s)
    end_date=$(date -d "${2}" +%s)
    current_date=$(date +%s)
  fi

  if [ $current_date -ge $start_date ] && [ $current_date -le $end_date ]; then
    return 0
  else
    return 1
  fi
}
