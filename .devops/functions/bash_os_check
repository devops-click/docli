#!/usr/bin/env bash
# [[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
# [[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################

## DOCLI MODULE INFORMATION
[[ "${BASH_SOURCE[0]}" != "" ]] && REAL_PATH=$(realpath "${BASH_SOURCE[0]}") || REAL_PATH=$(realpath "$0")
DOCLI_MODULE_VERSION=0.0.01
DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"
DOCLI_MODULE_TYPE="$(basename "$(dirname "$REAL_PATH")")"
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

# Prevents script from being called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "* $DOCLI_MODULE: This module cannot be called directly! Exiting... *"
  exit 1
fi

os_check_macos_or_linux() {
  # Check if the script is running on macOS or Linux
  OS=$(uname)
  if [ "$OS" != "Darwin" ] && [ "$OS" != "Linux" ]; then
    echo "Error: This script only supports macOS and Linux."
    exit 1
  fi
}

# Check if the script is running on macOS or Linux and fill variable $os
check_os() {
  os_var=$(uname)
  if [ "$os_var" == "Darwin" ]; then
    export os="macos"
  elif [ "$os_var" == "Linux" ]; then
    export os="linux"
  else
    echo "** ERROR: Supported only by MacOS and Linux. **"
    return 0
  fi
}