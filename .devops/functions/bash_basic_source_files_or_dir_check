#!/usr/bin/env bash
# [[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
# [[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################

## DOCLI MODULE INFORMATION
DOCLI_MODULE=bash_basic_source_files_or_dir_check
DOCLI_MODULE_TYPE=functions
DOCLI_MODULE_VERSION=0.0.01
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

# Prevents script from being called directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  echo "* $DOCLI_MODULE: This module cannot be called directly! Exiting... *"
  exit 1
fi

# Source this file and use as instructed bellow:
# Usage Example:
# FILE_OR_DIR_CHECK=(
#     ~/devops/scripts/set-bash-colors-tput.sh
#     ~/devops/envs
#     $script_dir/../devops/.functions/bash_terraform
#     $script_dir/../devops/.functions/bash_gpg_key
# )
# source_files_list

function source_files_list_dir_check {
  # Iterate through the sources and source or check them
  for source in "${FILE_OR_DIR_CHECK[@]}"; do
    if [[ -f $source ]]; then
      echo "** Sourcing file: $source"
      source $source
    elif [[ -d $source ]]; then
      echo "** Directory found: $source"
    else
      echo "ERROR: $source not found. Please execute the basic setup before proceeding."
      exit 1
    fi
  done
}
