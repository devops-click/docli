#!/usr/bin/env bash
# [[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
# [[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################
#                                 bash_set
###############################################################################

## DOCLI MODULE INFORMATION
[[ "${BASH_SOURCE[0]}" != "" ]] && REAL_PATH=$(realpath "${BASH_SOURCE[0]}") || REAL_PATH=$(realpath "$0")
DOCLI_MODULE_VERSION=0.0.01
DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"
DOCLI_MODULE_TYPE="$(basename "$(dirname "$REAL_PATH")")"
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

# Emulate -e: Exit immediately if any command exits with a non-zero status.
check_status() {
  if [ $? -ne 0 ]; then
    exit $?
  fi
}

# Emulate -u: Treat unset variables as an error when substituting.
check_unset() {
  varname="$1"
  if [ -z "${!varname+x}" ]; then
    echo "Error: Variable '$varname' is unset or empty."
    exit 1
  fi
}

# Run the necessary checks
check_status
check_unset "var1"
check_unset "var2"
