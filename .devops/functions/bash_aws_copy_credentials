#!/usr/bin/env bash
# [[ ${DOCLI_DEBUG:-false} == true ]]       && set -exo pipefail || set -eo pipefail
# [[ ${DOCLI_UNSET_VARS:-false} == true ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################

## DOCLI MODULE INFORMATION
DOCLI_MODULE=bash_aws_copy_credentials
DOCLI_MODULE_TYPE=functions
DOCLI_MODULE_VERSION=0.0.01
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## DEBUG INFORMATION
[[ ${DOCLI_DEBUG:-false} == true ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

export AWS_DEFAULT_OUTPUT=json

# Fetching the access token
accessToken=$(jq -r '.accessToken | select(. != null)' ~/.aws/sso/cache/*.json | head -n 1)
# echo "Access Token: $accessToken"

# Ensure that accessToken is not empty
if [ -z "$accessToken" ]; then
  echo "Access token is empty. Exiting."
  exit 1
fi

# Getting temporary credentials
echo "Fetching role credentials..."
role_credentials_output=$(aws sso get-role-credentials --account-id $DOCLI_AWS_ACCOUNT_ID_ROOT --role-name ${DOCLI_AWS_ROLE_NAME:-devops} --access-token "$accessToken")
# echo "Role Credentials Output: $role_credentials_output"

# Extracting AWS temporary credentials
# export AWS_ACCESS_KEY_ID=$(echo $role_credentials_output | jq -r '.roleCredentials.accessKeyId')
export TF_VAR_AWS_ACCESS_KEY_ID=$(echo $role_credentials_output | jq -r '.roleCredentials.accessKeyId')
export PKR_VAR_AWS_ACCESS_KEY_ID=$(echo $role_credentials_output | jq -r '.roleCredentials.accessKeyId')
# echo $PKR_VAR_AWS_ACCESS_KEY_ID
# export AWS_SECRET_ACCESS_KEY=$(echo $role_credentials_output | jq -r '.roleCredentials.secretAccessKey')
export PKR_VAR_AWS_SECRET_ACCESS_KEY=$(echo $role_credentials_output | jq -r '.roleCredentials.secretAccessKey')
export TF_VAR_AWS_SECRET_ACCESS_KEY=$(echo $role_credentials_output | jq -r '.roleCredentials.secretAccessKey')
# echo $PKR_VAR_AWS_SECRET_ACCESS_KEY
# export AWS_SESSION_TOKEN=$(echo $role_credentials_output | jq -r '.roleCredentials.sessionToken')
export PKR_VAR_AWS_SESSION_TOKEN=$(echo $role_credentials_output | jq -r '.roleCredentials.sessionToken')
export TF_VAR_AWS_SESSION_TOKEN=$(echo $role_credentials_output | jq -r '.roleCredentials.sessionToken')
# echo $PKR_VAR_AWS_SESSION_TOKEN
# export AWS_REGION="eu-central-1"
export PKR_VAR_AWS_REGION="eu-central-1"
export TF_VAR_AWS_REGION="eu-central-1"
# echo $PKR_VAR_AWS_REGION

# Ensure that AWS credentials are not empty
if [ -z "$PKR_VAR_AWS_ACCESS_KEY_ID" ] || [ -z "$PKR_VAR_AWS_SECRET_ACCESS_KEY" ] || [ -z "$PKR_VAR_AWS_SESSION_TOKEN" ] || [ -z "$PKR_VAR_AWS_REGION" ] || [ -z "$TF_VAR_AWS_ACCESS_KEY_ID" ] || [ -z "$TF_VAR_AWS_SECRET_ACCESS_KEY" ] || [ -z "$TF_VAR_AWS_SESSION_TOKEN" ] || [ -z "$TF_VAR_AWS_REGION" ]; then
  echo "Failed to extract AWS credentials. Exiting."
  exit 1
fi

echo "AWS Credentials set successfully."