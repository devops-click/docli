#!/usr/bin/env bash
[[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
[[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u

export PATH="${DOCLI_DIR:-/opt/devops}/bin:/opt/homebrew/bin:/usr/sbin:/sbin:/usr/bin:/bin:/usr/local/bin:/usr/local/sbin:$HOME/devops/bin:$PATH"

# Check for existence of docli_full_name and docli_user_email variables
if [[ -z "$DOCLI_OWN_NAME" ]]; then
  read -p "Please enter your full name: " full_name
else
  full_name="$DOCLI_OWN_NAME"
fi

if [[ -z "$DOCLI_OWN_EMAIL" ]]; then
  read -p "Please enter your email address: " user_email
else
  user_email="$DOCLI_OWN_EMAIL"
fi

# Remove @domain from e-mails
user_name="${user_email%%@*}"

mkdir -p $DOCLI/CA/clientsROOT/
# mkdir -p $DOCLI/CA/clientsINTERMEDIATE/

client_root_dir="$DOCLI/CA/clientsROOT"
# client_intermediate_dir="$DOCLI/CA/clientsINTERMEDIATE"
timestamp=$(date +%s)
current_date=$(date)
client_cert_user=$(whoami)
check_url="${DOCLI_PRIVATE_CA_URL:-localhost}"

## Mutual TLS Authentication with Consul Server

# Browser-based Authentication:
# If you're trying to access the Consul UI, some browsers like Chrome and Safari will automatically prompt you to choose a client certificate for mutual TLS authentication.

# Testing/Using it via curl:
echo "Command Line Authentication:"

echo -e "\n** VERIFY SERVER CERTIFICATES (Curl HTTP/2) **"
curl -vvv --http2 --cert new_client_cert.pem --key new_client_key.pem --cacert $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem https://$check_url || echo

echo -e "\n** VERIFY SERVER CERTIFICATES (OpenSSL) **"
openssl s_client -connect $check_url -CAfile $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem -cert new_client_cert.pem -key new_client_key.pem -debug -msg || echo

echo -e "\n** VERIFY SERVER CERTIFICATES WITH YOUR KEY/CERT (Curl) **"
curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key --cacert $DOCLI/CA/intermediateCA/certs/intermediate.ent.cert.pem https://$check_url || echo

echo -e "\n** VERIFY TCP HANDSHAKES **"
# sudo tcpdump -i any -s 0 -w output.pcap "port 8501 and host $check_url"

# curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key --cacert $DOCLI/CA/intermediateCA/certs/intermediate.ent.cert.pem https://$check_url || echo "FAIL WITH CA BUNDLE CERT"
curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key --cacert $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem https://$check_url || echo "FAIL WITH CA ENT CERT"
curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key https://$check_url || echo "FAIL WITH CLIENT CERT ONLY"


curl --cacert $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem https://$check_url || echo "FAIL WITH CA ENT CERT ONLY"
curl --key $client_root_dir/$user_name.key https://$check_url || echo "FAIL WITH CLIENT KEY ONLY"
curl --cert $client_root_dir/$user_name.crt https://$check_url || echo "FAIL WITH CLIENT CERT ONLY"
curl --cert $client_root_dir/$user_name.p12 https://$check_url || echo "FAIL WITH CLIENT P12"