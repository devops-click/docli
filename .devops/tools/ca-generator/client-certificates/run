#!/usr/bin/env bash
[[ ${DOCLI_DEBUG:-false} == true ]]       && set -exo pipefail || set -eo pipefail
[[ ${DOCLI_UNSET_VARS:-false} == true ]]  && set -u

source $DOCLI_PROJECT_ROOT/.docli_envs

## Override variables with command line arguments
DOCLI_OWN_NAME=${1:-$DOCLI_OWN_NAME}
DOCLI_OWN_EMAIL=${2:-$DOCLI_OWN_EMAIL}

# Check if certificate will be imported to firefox
DOCLI_CERT_IMPORT_TO_FIREFOX=${DOCLI_CERT_IMPORT_TO_FIREFOX:-false}

# Check if certificate will be CRL disabled
DOCLI_CLIENT_CERT_CRL_DISABLED=${DOCLI_CLIENT_CERT_CRL_DISABLED:-false}

# Check for existence of DOCLI_OWN_NAME and DOCLI_OWN_EMAIL variables
if [[ -z "$DOCLI_OWN_NAME" ]]; then
  read -p "Please enter your full name: " full_name
else
  full_name="$DOCLI_OWN_NAME"
fi

if [[ -z "$DOCLI_OWN_EMAIL" ]]; then
  read -p "Please enter your email address: " user_email
else
  user_email="$DOCLI_OWN_EMAIL"
fi

# Remove @domain from e-mails
user_name="${user_email%%@*}"

client_root_dir="$DOCLI/CA/clientsINTERMEDIATE" # $DOCLI/CA/clientsROOT
client_root_dir="$DOCLI/CA/clientsINTERMEDIATE"
timestamp=$(date +%s)
current_date=$(date)
os_user=$(whoami)
cert_check_url=${DOCLI_CERT_CHECK_URL:-"https://noserver.local"}

## Create Client Root Directory
[[ ! -d $client_root_dir ]] && mkdir -p $client_root_dir

## Client Certificate LOG GENERATION
[[ ! -f $client_root_dir/gen_client_cert.log ]] && touch $client_root_dir/gen_client_cert.log
log_section=$(cat <<EOF
$current_date:
** Certification Generation Log **
timestamp: \`$timestamp\`
os_user:   \`$os_user\`
#------------------- Certficate Information -------------------#
User:  \`$user_name\`
Email: \`$user_email\`
EOF
)
echo "$log_section" >> $client_root_dir/gen_client_cert.log

echo -e "\n** SSL Client Certificate: Generates Client Private Key **"
[[ ! -f $client_root_dir/$user_name.key ]] && /usr/bin/openssl genpkey -algorithm RSA -out $client_root_dir/$user_name.key

### TEMPLATEFILE
echo -e "\n** SSL Client Certificate: Generates Template File (openssl.cnf)[current directory] **"
cat <<EOFtemplate > openssl.cnf
[ req ]
default_bits            = 2048
default_md              = sha256
prompt                  = no
encrypt_key             = no
distinguished_name      = req_distinguished_name
req_extensions          = req_ext

[ req_distinguished_name ]
countryName             = $SSL_COUNTRY
localityName            = $SSL_LOCALITY
stateOrProvinceName     = $SSL_STATE
organizationName        = $SSL_COMPANY
organizationalUnitName  = $SSL_OU
commonName              = $full_name ($user_email)
emailAddress            = $user_email

[ req_ext ]
extendedKeyUsage = clientAuth
crlDistributionPoints = URI:${DOCLI_CERT_CRL_URL}

[ req_distinguished_name ]
EOFtemplate

echo -e "\n** SSL Client Certificate: Applying template variable substitution **"
envsubst < openssl.cnf > cert-req.cnf

echo -e "\n** SSL Client Certificate: Create a certificate signing request (CSR) for the client key: [ENTERPRISE] **"
/usr/bin/openssl req -new -key $client_root_dir/$user_name.key -out $client_root_dir/$user_name.csr -config cert-req.cnf

if [[ $DOCLI_CLIENT_CERT_CRL_DISABLED == false ]]; then
  echo -e "\n** SSL Client Certificate: Sign the CSR with the CA using CRL **""
  /usr/bin/openssl x509 -req -in $client_root_dir/$user_name.csr -CA $DOCLI/CA/intermediateCA/certs/intermediate.ent.cert.pem -CAkey $DOCLI/CA/intermediateCA/private/intermediate.ent.key.pem -CAcreateserial -out $client_root_dir/$user_name.crt -days $DOCLI_CERT_EXPIRY -extfile cert-req.cnf -extensions req_ext
else
  echo -e "\n** SSL Client Certificate: Sign the CSR with the CA NOT using CRL **""
  /usr/bin/openssl x509 -req -in $client_root_dir/$user_name.csr -CA $DOCLI/CA/intermediateCA/certs/intermediate.ent.cert.pem -CAkey $DOCLI/CA/intermediateCA/private/intermediate.ent.key.pem -CAcreateserial -out $client_root_dir/$user_name.crt -days $DOCLI_CERT_EXPIRY
fi

echo -e "\n* Removing Temporary Template File *"
rm cert-req.cnf

# ## OLD METHOD - WITHOUT CRL and not using TEMPLATE FILE
# echo "Client Certificate: Create a certificate signing request (CSR) for the client key: [ENTERPRISE]"
# /usr/bin/openssl req -new -key $client_root_dir/$user_name.key -out $client_root_dir/$user_name.csr -subj "/C=$SSL_COUNTRY/ST=$SSL_STATE/L=$SSL_LOCALITY/O=$SSL_COMPANY/OU=$SSL_OU/OU=ent/CN=$full_name ($user_email)"

# echo "Client Certificate: Sign the CSR with the CA:"
# /usr/bin/openssl x509 -req -in $client_root_dir/$user_name.csr -CA $DOCLI/CA/intermediateCA/certs/intermediate.ent.cert.pem -CAkey $DOCLI/CA/intermediateCA/private/intermediate.ent.key.pem -CAcreateserial -out $client_root_dir/$user_name.crt -days $DOCLI_CERT_EXPIRY
# /usr/bin/openssl x509 -req -in $client_root_dir/$user_name.csr -CA $DOCLI/CA/rootCA/certs/ca.cert.pem -CAkey $DOCLI/CA/rootCA/private/ca.key.pem -CAcreateserial -out $client_root_dir/$user_name.crt -days 1825
# /usr/bin/openssl x509 -req -in $client_root_dir/$user_name.csr -CA $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem -CAkey $DOCLI/CA/rootCA/private/ca.key.pem -CAcreateserial -out $client_root_dir/$user_name.crt -days 1825

# # MACOS ONLY
# # Find and delete the associated key
# # key_hash=$(security find-key -c "$full_name ($user_email)" ~/Library/Keychains/login.keychain-db | awk '/keychain:/{print $4}')
# # if [ ! -z "$key_hash" ]; then
# #   sudo security delete-key -Z "$key_hash" ~/Library/Keychains/login.keychain-db
# # fi
#
# # # Find and delete associated keys
# # security find-key -c "$full_name ($user_email)" ~/Library/Keychains/login.keychain-db | awk '/keychain:/{print $4}' | while read -r key_hash; do
# #   if [ ! -z "$key_hash" ]; then
# #     echo "* Deleting Key from Hash: $key_hash *"
# #     sudo security delete-key -Z "$key_hash" ~/Library/Keychains/login.keychain-db || echo "* ERROR: Could not delete private key (hash: $key_hash) *"
# #   fi
# # done
# # fi

#######################################################################################################################################################
# OS AND BROWSER CERTIFICATE IMPORT
#######################################################################################################################################################

############# CLEANUP #############
# Delete the certificate AND private key (Adding -Z path does not work)
echo "MacOS: Delete existing key and certificate from keychain before continue"
security delete-identity -t -c "$full_name ($user_email)" || echo "* INFO: $full_name ($user_email) not found! *"

# # Delete the certificate only
# echo "MacOS: Delete existing key and certificate from keychain before continue"
# sudo security find-certificate -c "$full_name ($user_email)" -a -Z ~/Library/Keychains/login.keychain-db | \
# awk '/SHA-1 hash:/{system("sudo security delete-certificate -Z "$3" ~/Library/Keychains/login.keychain-db")}' || echo "* INFO: $full_name ($user_email) not found! *"

############# IMPORT #############
# sudo security import $client_root_dir/$user_name.p12 -k ~/Library/Keychains/login.keychain-db
sudo security import $client_root_dir/$user_name.key -k ~/Library/Keychains/login.keychain-db || echo "* Key already exists *"
sudo security import $client_root_dir/$user_name.crt -k ~/Library/Keychains/login.keychain-db || echo "* Certificate already exists *"

ls -larth $client_root_dir/

# Create a PKCS12 certificate
openssl pkcs12 -export -in $client_root_dir/$user_name.crt -inkey $client_root_dir/$user_name.key -out $client_root_dir/$user_name.p12 -name "$full_name ($user_email)" -passout pass:

## MUST BE LIBRESSL TO IMPORT ##
# echo "MacOS: Import the PKCS#12 file into your macOS keychain:"

ls -larth $client_root_dir

echo

## FIREFOX
if [[ $DOCLI_CERT_IMPORT_TO_FIREFOX == "true" ]]; then
  # Find Firefox profiles and import the certificate
  while read -r profile; do
    # Clean actual Firefox certificates
    echo "* Own Client Certificate -> Removing $client_root_dir/$user_name.crt from Firefox Profiles *"
    certutil -D -n "$full_name ($user_email)" -d "sql:$profile" || echo "* $full_name ($user_email) does not exist *"

    # Import PCKS12
    echo "Importing certificate into Firefox profile in directory: $profile"
    pk12util -i $client_root_dir/$user_name.p12 -d "$profile" -W ''

    # List if all Keys were cleaned
    echo -e "\n======================================================================================"
    echo -e "*                          LISTING ALL FIREFOX CERTIFICATES                          *"
    echo -e "======================================================================================"
    certutil -L -d "sql:$profile"
    echo -e "\n======================================================================================\n"
  done < <(find $HOME/.mozilla/firefox/ $HOME/.mozilla/firefox/*/ "$HOME/Library/Application Support/Firefox/Profiles" -maxdepth 1 -name '*.default*' -type d)
fi

#######################################################################################################################################################
# CERTIFICATE VALIDATION
#######################################################################################################################################################

###################################
#### Mutual TLS Authentication ####
###################################

# Browser-based Authentication:
# If you're trying to access the Consul UI, some browsers like Chrome and Safari will automatically prompt you to choose a client certificate for mutual TLS authentication.

# Testing/Using it via curl:
echo "** TEST: curl using --cacert $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem **"
curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key --cacert $DOCLI/CA/intermediateCA/certs/ca-chain-cert.pem $cert_check_url > cert_chain_test_output.log && echo "* OK: Successfully validated certificate using cacert *" || echo "* ERROR: Could not validate certificate using cacert *"
echo "** TEST: curl using --capath $DOCLI/CA/c_rehash **"
curl --cert $client_root_dir/$user_name.crt --key $client_root_dir/$user_name.key --capath $DOCLI/CA/c_rehash $cert_check_url > cert_c_rehashtest_output.log && echo "* OK: Successfully validated certificate using capath *" || echo "* ERROR: Could not validate certificate using capath *"

zip $HOME/Downloads/$user_name.zip $client_root_dir/$user_name.key $client_root_dir/$user_name.crt $client_root_dir/$user_name.p12
# TODO: do a process to send user zip to devops@domain.com or in a slack channel.

# rm -rf $client_root_dir/*

echo "** Notification: Sending Slack notification **"
# curl -X POST \
#   https://slack.com/api/chat.postMessage \
#   -H 'Content-Type: application/json' \
#   -d '{"text": "'"${log_section}"'", "channel": "#devops-info"}' \
#   -H "Authorization: Bearer $SLACK_TOKEN_BOT"

curl -X POST \
  https://slack.com/api/chat.postMessage \
  -H 'Content-Type: application/json' \
  -d "$(jq -n --arg text "$log_section" '{text: $text, channel: "#devops-info"}')" \
  -H "Authorization: Bearer $SLACK_TOKEN_BOT"
