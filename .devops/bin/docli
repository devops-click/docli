#!/usr/bin/env bash
set -euo pipefail
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################
#                                   docli
###############################################################################

docli_version="0.0.01"
docli_file_name="$(basename "$0")"
docli_file_name_upper="$(basename "$0" | tr '[:lower:]' '[:upper:]')"
docli_script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
docli_current_dir="$(pwd)"

echo "==> .docli -> source bash_basic_functions"
source $docli_script_dir/../functions/bash_basic_functions

docli_command="${1:-}"
docli_option="${2:-}"

# Declare global variables
declare -a args=()
# Check if the variable is set and if not, set it to its default value
: "${args_verbose:=0}"
: "${args_debug:=0}"
: "${args_ignore_questions:=0}"
: "${args_silent:=0}"

: "${DOCLI_VERBOSE:=}"
: "${DOCLI_DEBUG:=}"

load_vars() {
  echo "==> .docli -> load_vars"
  # Validations to activate modes:
  DOCLI_VERBOSE="[[ $args_verbose == 1 || $args_debug == 1 ]]"
  DOCLI_DEBUG="[[ $args_debug == 1 ]]"
  scape=x
}
# load_vars

# source $docli_script_dir/../functions/bash_base_get_arguments
# set -- $(parse_arguments "$@")
#########################
# args_debug=0
# args_verbose=1

# Argument Parsing
parse_arguments() {
    # echo parse_arguments
    while (( "$#" )); do
        # local current_arg="${1:-}"
        local current_arg="$1"
        echo $current_arg
        case "$current_arg" in
            -v|--verbose)
                if [ "${2:-}" == "true" ]; then
                    args_verbose=1
                    shift 2
                elif [ "${2:-}" == "false" ]; then
                    args_verbose=0
                    shift 2
                else
                    args_verbose=1
                    shift
                fi
                ;;
            --verbose=*)
                if [ "${1#*=}" == "true" ]; then
                    args_verbose=1
                else
                    args_verbose=0
                fi
                shift
                ;;
            -d|--debug)
                if [ "${2:-}" == "true" ]; then
                    args_debug=1
                    shift 2
                elif [ "${2:-}" == "false" ]; then
                    args_debug=0
                    shift 2
                else
                    args_debug=1
                    shift
                fi
                ;;
            --debug=*)
                if [ "${1#*=}" == "true" ]; then
                    args_debug=1
                else
                    args_debug=0
                fi
                shift
                ;;
            -i|--ignore-questions)
                args_ignore_questions=1
                shift
                ;;
            -s|--silent)
                args_silent=1
                shift
                ;;
            --version)
                # clear
                echo -e "DevOps.click CLI v$docli_version"
                exit 0
                ;;
            --version-short)
                # clear
                echo -e "$docli_version"
                exit 0
                ;;
            -h|--help)
                args_help=$(help_index $docli_command)
                # help_index $docli_command
                source $docli_script_dir/../$args_help
                eval ${docli_command}_print_usage
                break
                # return 0
                ;;
            *)
                # Preserve any other argument for later (used for other option validations menus like remaining_args=($(parse_arguments "$@")) )
                # args+=("$1")
                # args+=("${1:-}")
                args+=("${current_arg}")
                eval $DOCLI_DEBUG && echo "++ args+=$args"
                # remaining_args+=("$current_arg")
                shift
                # return 0
                # break
                # # Unsupported options
                # echo "Error: Unsupported option $1"
                # print_usage
                ;;
        esac
    done
    # This will print args to be used in next scripts.
    # TODO: Make a way to pass this without printing on screen
    # export exported_args=$(echo "${args[@]}")
    echo
    echo "${args[@]}"
}

load_vars

# set -- $(parse_arguments "$@")
parse_arguments "$@"

# Use the options
if [ "$args_verbose" == "1" ]; then
    echo "VERBOSE mode is on."
fi

if [ "$args_debug" == "1" ]; then
    echo "DEBUG mode is on."
fi

if (( args_ignore_questions )); then
    echo "Ignoring questions."
fi

if (( args_silent )); then
    echo "Running in SILENT mode."
fi

eval $DOCLI_DEBUG && echo "+++++++++++++++++++"
eval $DOCLI_DEBUG && echo "++ Entered docli ++"
eval $DOCLI_DEBUG && echo "+++++++++++++++++++"

eval $DOCLI_DEBUG && echo "++> docli_command=$docli_command"
eval $DOCLI_DEBUG && echo "++> docli_option=$docli_option"

echo "==> docli -> source .docli"
source $docli_script_dir/../../.docli

echo "==> docli -> echo args_help"
echo "args_help=${args_help:-}"

# Check docli_eks_assign existence before set.
: "${docli_eks_assign:=false}"
eval $DOCLI_DEBUG && echo "++> docli_eks_assign=$docli_eks_assign"

# parse_arguments "$@"
## docli Markdown Generation:
#:: ## docli AWS SSO Tools
#:: `sso` [-h|--help]
#:: ## DESCRIPTION
#:: This program has the following functionalies:
#:: `sso clean` -> Cleans all AWS SSO Tokens (CLI and SSO caches)
#:: `sso <aws_profile>` -> Connect to the desired AWS SSO profile. (For more info how to configure go to https://devops.click/)
# source $docli_script_dir/../functions/bash_basic_functions
# source $docli_script_dir/../functions/bash_base_get_arguments

#:: ## help index search
#:: Search into help index for the location of the correct help to load.
#:: `help_index <command>` [-h|--help]
help_var=$(help_index $docli_command)
# [[ -f $bash_base_get_arguments_script_dir/../$help_var ]] && source $bash_base_get_arguments_script_dir/../$help_var
eval $DOCLI_DEBUG && echo "++> help_var=$help_var"

eval $DOCLI_VERBOSE && echo -e "\n**** Running $docli_file_name_upper script ****"

docli_print_usage() {
    echo
    banner
    echo "  $docli_file_name_upper v$docli_version"
    echo "'--------------------------------------------------------'"
    echo
    echo "Usage: $0 <aws_profile> [OPTIONS]"
    echo
    echo "sso clean                 -> Cleans all AWS SSO Tokens (CLI and SSO caches)"
    echo "sso <aws_profile>         -> Connect to the desired AWS SSO profile. (For more info how to configure go to https://devops.click/)"
    echo "backup <system> <options> -> Backups multiple kinds of systems. From Mac to Databases"
    echo "operations <options>      -> Internal docli Operations. May suffer constant updates"
    echo "gendoc /path/file         -> Generate Markdown Documentation for specified file. (For more info how to configure go to https://devops.click/)"
    echo
    print_options
    exit 1
}

#:: # Function to check software versions.
#:: ## Usage example:
#:: `check_versions`
check_versions() {
  brew outdated
  # TODO: put more checks in here...
}

#:: # Function to check AWS CLI connectivity.
#:: ## Usage example:
#:: `check_aws_con`
check_aws_con() {
  check_aws_con=$(aws sts get-caller-identity --query "Account" --output text)
}

## ATTENTION: Do not call scripts in here that source our base scripts. Doing so will break it.
main() {
  # remaining Args, allow cascading of while functions to work with 2 layer validation.
  remaining_args=($(parse_arguments "$@"))
  while (( "${#remaining_args[@]}" )); do
    case "${remaining_args[0]}" in
      tf)
        source $docli_script_dir/../main/tf
        if [ "${1#*=}" == "" ]; then
          tf_print_usage
        fi
        shift
        runtfzao
        break
        ;;
      #---------------- HashiCorp Packer ----------------#
      packer)
        shift
        source $docli_script_dir/../main/packer
        echo docli_option=$docli_option
        if [ "${1:-}" == "" ]; then
          packer_print_usage
        elif [[ $docli_option == "build" ]]; then
          eval $DOCLI_DEBUG && echo "++> options -> packer -> build"
          run_packer_main "$@"
          return 0
        elif [[ -z $docli_option ]]; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> ERROR(exception)"
          echo "** SSO ERROR: No options provided **"
          sso_print_usage
          exit 1
        fi
        sso $docli_option
        break
        ;;
      #---------------- SSO ----------------#
      sso)
        source $docli_script_dir/../main/sso
        echo docli_option=$docli_option
        if [ "${1:-}" == "" ]; then
          sso_print_usage
        elif [[ $docli_option == "clean" ]]; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> clean"
          sso_clean
          return 0
        elif [[ $sso_eks_assign == "true" ]] ; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> sso_eks_assign=true"
          sso $docli_option
          return 0
        elif [[ $sso_eks_assign == "false" ]] ; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> sso_eks_assign=false"
          sso $docli_option
          return 0
        elif [[ $docli_option == "mfa" ]]; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> mfa"
          check_file_age
          sso_login_mfa
          return 0
        elif [[ -z $docli_option ]]; then
          eval $DOCLI_DEBUG && echo "++> options -> sso -> ERROR(exception)"
          echo "** SSO ERROR: No options provided **"
          sso_print_usage
          exit 1
        fi
        sso $docli_option
        break
        ;;
      #---------------- OP ----------------#
      op)
        shift
        source $docli_script_dir/../functions/bash_op
        if [ "${1#*=}" == "" ]; then
          op_print_usage
        elif [ $1 == "create" ]; then
          shift
          local title="${1:-}" #item_name
          local file_source="${2:-}"
          local file_name="${3:-}"
          local file_vault="${4:-}"
          local tags="${5:-}"
          [[ -z $tags ]] && tags='ClearOps'
          op_create_document $file_source $title "$file_vault" $file_name $tags
          exit 0
        else
          echo "** Invalid Option **"
        fi
        ;;
      sys)
        shift
        source $docli_script_dir/../main/sys
        local local_option="${1:-}"
        local files_path="${2:-}"
        echo local_option=$local_option
        echo files_path=$files_path
        if [[ $local_option == "refactor" ]]; then
          # Remove #dltbr lines
          sys_clean_files $files_path
          return 0
        elif [[ $local_option == "markdown" ]]; then
          shift
          [[ "${1:-}" == "aws" ]]
          local local_file="${1:-}"
          $docli_script_dir/../scripts/docli_generate_markdown_doc $local_file
          return 0
        else
          echo "** No operation provided **"
          return 0
        fi
        ;;
      gendoc)
        shift
        local local_file="${1:-}"
        $docli_script_dir/../scripts/docli_generate_markdown_doc $local_file
        return 0
        ;;
      *)
        # Unsupported options
        echo "Error: Unsupported command ${remaining_args[0]}"
        docli_print_usage
        ;;
    esac
  done
}

main "${args[@]}"