#!/usr/bin/env bash
[[ "${DOCLI_DEBUG:-off}" == "on" ]]       && set -exo pipefail || set -eo pipefail
[[ "${DOCLI_UNSET_VARS:-off}" == "on" ]]  && set -u
############################################################################### #dltbr
#              https://DevOps.click - DevOps taken seriously                  # #dltbr
###############################################################################

## DOCLI MODULE INFORMATION
DOCLI_MODULE_VERSION="0.0.01"
DOCLI_MODULE="$(basename "${BASH_SOURCE[0]}")"
DOCLI_MODULE_TYPE="$(basename "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")"
DOCLI_MODULE_UPPER=$(echo "$DOCLI_MODULE" | tr '[:lower:]' '[:upper:]')

## VERBOSE INFORMATION
[[ "${DOCLI_VERBOSE:-off}" == "on" ]] && echo -e "\n***** $DOCLI_MODULE version $DOCLI_MODULE_VERSION ($DOCLI_MODULE_TYPE) *****\n"

OPTION=${1:-help}

# Source docli_pre_envs to be able to load customizations like DEVELOPER_MODE
source ${DOCLI_DIR:-$DOCLI}/functions/docli_pre_envs "$@"
# [[ "${BASH_SOURCE[0]}" == "${0}" ]] && source ${DOCLI_DIR:-$DOCLI}/functions/docli_pre_envs "$@"

# Check if the directory ends with 'bin', then use the appropriate source command
if [[ "$(basename "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")" == "bin" ]]; then
  source "${DOCLI_DIR:-$DOCLI}/main/x_$(basename "${BASH_SOURCE[0]}")" "$@"
else
  # source "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/x_$(basename "${BASH_SOURCE[0]}")" "$@"
  source "${DOCLI_DIR:-$DOCLI}/"$(basename "$(dirname "$(realpath "${BASH_SOURCE[0]}")")")"/x_$(basename "${BASH_SOURCE[0]}")" "$@"
fi
